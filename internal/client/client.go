// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for HostStatus.
const (
	HostStatusMaintenance HostStatus = "maintenance"
	HostStatusOffline     HostStatus = "offline"
	HostStatusOnline      HostStatus = "online"
)

// Defines values for HostHeartbeatRequestStatus.
const (
	HostHeartbeatRequestStatusMaintenance HostHeartbeatRequestStatus = "maintenance"
	HostHeartbeatRequestStatusOffline     HostHeartbeatRequestStatus = "offline"
	HostHeartbeatRequestStatusOnline      HostHeartbeatRequestStatus = "online"
)

// Defines values for HostUpdateRequestStatus.
const (
	HostUpdateRequestStatusMaintenance HostUpdateRequestStatus = "maintenance"
	HostUpdateRequestStatusOffline     HostUpdateRequestStatus = "offline"
	HostUpdateRequestStatusOnline      HostUpdateRequestStatus = "online"
)

// Defines values for GetApiV1HostsParamsStatus.
const (
	GetApiV1HostsParamsStatusMaintenance GetApiV1HostsParamsStatus = "maintenance"
	GetApiV1HostsParamsStatusOffline     GetApiV1HostsParamsStatus = "offline"
	GetApiV1HostsParamsStatusOnline      GetApiV1HostsParamsStatus = "online"
)

// Error defines model for Error.
type Error struct {
	// Error Error message
	Error *string `json:"error,omitempty"`
}

// Host defines model for Host.
type Host struct {
	// CreatedAt When the host was registered
	CreatedAt time.Time `json:"created_at"`

	// DeletedAt When the host was deregistered (soft delete)
	DeletedAt *time.Time `json:"deleted_at"`

	// Hostname Hostname of the system
	Hostname string `json:"hostname"`

	// Id Unique identifier for the host
	Id int64 `json:"id"`

	// IpAddress Primary IP address
	IpAddress string `json:"ip_address"`

	// OsName Operating system name
	OsName string `json:"os_name"`

	// OsVersion Operating system version
	OsVersion string `json:"os_version"`

	// Status Current host status
	Status HostStatus `json:"status"`

	// UpdatedAt When the host was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// HostStatus Current host status
type HostStatus string

// HostCreateRequest defines model for HostCreateRequest.
type HostCreateRequest struct {
	// Hostname Hostname of the system
	Hostname string `json:"hostname"`

	// IpAddress Primary IP address
	IpAddress string `json:"ip_address"`

	// OsName Operating system name
	OsName string `json:"os_name"`

	// OsVersion Operating system version
	OsVersion string `json:"os_version"`
}

// HostHeartbeatRequest defines model for HostHeartbeatRequest.
type HostHeartbeatRequest struct {
	// Status Current host status
	Status *HostHeartbeatRequestStatus `json:"status,omitempty"`
}

// HostHeartbeatRequestStatus Current host status
type HostHeartbeatRequestStatus string

// HostUpdateRequest defines model for HostUpdateRequest.
type HostUpdateRequest struct {
	// Hostname Hostname of the system
	Hostname *string `json:"hostname,omitempty"`

	// IpAddress Primary IP address
	IpAddress *string `json:"ip_address,omitempty"`

	// Status Current host status
	Status *HostUpdateRequestStatus `json:"status,omitempty"`
}

// HostUpdateRequestStatus Current host status
type HostUpdateRequestStatus string

// GetApiV1HostsParams defines parameters for GetApiV1Hosts.
type GetApiV1HostsParams struct {
	// Status Filter by host status
	Status *GetApiV1HostsParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// GetApiV1HostsParamsStatus defines parameters for GetApiV1Hosts.
type GetApiV1HostsParamsStatus string

// PostApiV1HostsJSONRequestBody defines body for PostApiV1Hosts for application/json ContentType.
type PostApiV1HostsJSONRequestBody = HostCreateRequest

// PutApiV1HostsIdJSONRequestBody defines body for PutApiV1HostsId for application/json ContentType.
type PutApiV1HostsIdJSONRequestBody = HostUpdateRequest

// PostApiV1HostsIdHeartbeatJSONRequestBody defines body for PostApiV1HostsIdHeartbeat for application/json ContentType.
type PostApiV1HostsIdHeartbeatJSONRequestBody = HostHeartbeatRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiV1Hosts request
	GetApiV1Hosts(ctx context.Context, params *GetApiV1HostsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1HostsWithBody request with any body
	PostApiV1HostsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Hosts(ctx context.Context, body PostApiV1HostsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1HostsId request
	DeleteApiV1HostsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1HostsId request
	GetApiV1HostsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1HostsIdWithBody request with any body
	PutApiV1HostsIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1HostsId(ctx context.Context, id int, body PutApiV1HostsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1HostsIdHeartbeatWithBody request with any body
	PostApiV1HostsIdHeartbeatWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1HostsIdHeartbeat(ctx context.Context, id int, body PostApiV1HostsIdHeartbeatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHealth request
	GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiV1Hosts(ctx context.Context, params *GetApiV1HostsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1HostsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1HostsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1HostsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Hosts(ctx context.Context, body PostApiV1HostsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1HostsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1HostsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1HostsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1HostsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1HostsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1HostsIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1HostsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1HostsId(ctx context.Context, id int, body PutApiV1HostsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1HostsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1HostsIdHeartbeatWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1HostsIdHeartbeatRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1HostsIdHeartbeat(ctx context.Context, id int, body PostApiV1HostsIdHeartbeatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1HostsIdHeartbeatRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiV1HostsRequest generates requests for GetApiV1Hosts
func NewGetApiV1HostsRequest(server string, params *GetApiV1HostsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/hosts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1HostsRequest calls the generic PostApiV1Hosts builder with application/json body
func NewPostApiV1HostsRequest(server string, body PostApiV1HostsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1HostsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1HostsRequestWithBody generates requests for PostApiV1Hosts with any type of body
func NewPostApiV1HostsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/hosts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1HostsIdRequest generates requests for DeleteApiV1HostsId
func NewDeleteApiV1HostsIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/hosts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1HostsIdRequest generates requests for GetApiV1HostsId
func NewGetApiV1HostsIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/hosts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1HostsIdRequest calls the generic PutApiV1HostsId builder with application/json body
func NewPutApiV1HostsIdRequest(server string, id int, body PutApiV1HostsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1HostsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV1HostsIdRequestWithBody generates requests for PutApiV1HostsId with any type of body
func NewPutApiV1HostsIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/hosts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1HostsIdHeartbeatRequest calls the generic PostApiV1HostsIdHeartbeat builder with application/json body
func NewPostApiV1HostsIdHeartbeatRequest(server string, id int, body PostApiV1HostsIdHeartbeatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1HostsIdHeartbeatRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostApiV1HostsIdHeartbeatRequestWithBody generates requests for PostApiV1HostsIdHeartbeat with any type of body
func NewPostApiV1HostsIdHeartbeatRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/hosts/%s/heartbeat", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHealthRequest generates requests for GetHealth
func NewGetHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiV1HostsWithResponse request
	GetApiV1HostsWithResponse(ctx context.Context, params *GetApiV1HostsParams, reqEditors ...RequestEditorFn) (*GetApiV1HostsResponse, error)

	// PostApiV1HostsWithBodyWithResponse request with any body
	PostApiV1HostsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1HostsResponse, error)

	PostApiV1HostsWithResponse(ctx context.Context, body PostApiV1HostsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1HostsResponse, error)

	// DeleteApiV1HostsIdWithResponse request
	DeleteApiV1HostsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteApiV1HostsIdResponse, error)

	// GetApiV1HostsIdWithResponse request
	GetApiV1HostsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetApiV1HostsIdResponse, error)

	// PutApiV1HostsIdWithBodyWithResponse request with any body
	PutApiV1HostsIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1HostsIdResponse, error)

	PutApiV1HostsIdWithResponse(ctx context.Context, id int, body PutApiV1HostsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1HostsIdResponse, error)

	// PostApiV1HostsIdHeartbeatWithBodyWithResponse request with any body
	PostApiV1HostsIdHeartbeatWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1HostsIdHeartbeatResponse, error)

	PostApiV1HostsIdHeartbeatWithResponse(ctx context.Context, id int, body PostApiV1HostsIdHeartbeatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1HostsIdHeartbeatResponse, error)

	// GetHealthWithResponse request
	GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error)
}

type GetApiV1HostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Host
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1HostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1HostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1HostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Host
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostApiV1HostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1HostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1HostsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1HostsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1HostsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1HostsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Host
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1HostsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1HostsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1HostsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Host
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PutApiV1HostsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1HostsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1HostsIdHeartbeatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Host
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostApiV1HostsIdHeartbeatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1HostsIdHeartbeatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
		Version *string `json:"version,omitempty"`
	}
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiV1HostsWithResponse request returning *GetApiV1HostsResponse
func (c *ClientWithResponses) GetApiV1HostsWithResponse(ctx context.Context, params *GetApiV1HostsParams, reqEditors ...RequestEditorFn) (*GetApiV1HostsResponse, error) {
	rsp, err := c.GetApiV1Hosts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1HostsResponse(rsp)
}

// PostApiV1HostsWithBodyWithResponse request with arbitrary body returning *PostApiV1HostsResponse
func (c *ClientWithResponses) PostApiV1HostsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1HostsResponse, error) {
	rsp, err := c.PostApiV1HostsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1HostsResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1HostsWithResponse(ctx context.Context, body PostApiV1HostsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1HostsResponse, error) {
	rsp, err := c.PostApiV1Hosts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1HostsResponse(rsp)
}

// DeleteApiV1HostsIdWithResponse request returning *DeleteApiV1HostsIdResponse
func (c *ClientWithResponses) DeleteApiV1HostsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteApiV1HostsIdResponse, error) {
	rsp, err := c.DeleteApiV1HostsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1HostsIdResponse(rsp)
}

// GetApiV1HostsIdWithResponse request returning *GetApiV1HostsIdResponse
func (c *ClientWithResponses) GetApiV1HostsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetApiV1HostsIdResponse, error) {
	rsp, err := c.GetApiV1HostsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1HostsIdResponse(rsp)
}

// PutApiV1HostsIdWithBodyWithResponse request with arbitrary body returning *PutApiV1HostsIdResponse
func (c *ClientWithResponses) PutApiV1HostsIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1HostsIdResponse, error) {
	rsp, err := c.PutApiV1HostsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1HostsIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1HostsIdWithResponse(ctx context.Context, id int, body PutApiV1HostsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1HostsIdResponse, error) {
	rsp, err := c.PutApiV1HostsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1HostsIdResponse(rsp)
}

// PostApiV1HostsIdHeartbeatWithBodyWithResponse request with arbitrary body returning *PostApiV1HostsIdHeartbeatResponse
func (c *ClientWithResponses) PostApiV1HostsIdHeartbeatWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1HostsIdHeartbeatResponse, error) {
	rsp, err := c.PostApiV1HostsIdHeartbeatWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1HostsIdHeartbeatResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1HostsIdHeartbeatWithResponse(ctx context.Context, id int, body PostApiV1HostsIdHeartbeatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1HostsIdHeartbeatResponse, error) {
	rsp, err := c.PostApiV1HostsIdHeartbeat(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1HostsIdHeartbeatResponse(rsp)
}

// GetHealthWithResponse request returning *GetHealthResponse
func (c *ClientWithResponses) GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error) {
	rsp, err := c.GetHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthResponse(rsp)
}

// ParseGetApiV1HostsResponse parses an HTTP response from a GetApiV1HostsWithResponse call
func ParseGetApiV1HostsResponse(rsp *http.Response) (*GetApiV1HostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1HostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Host
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1HostsResponse parses an HTTP response from a PostApiV1HostsWithResponse call
func ParsePostApiV1HostsResponse(rsp *http.Response) (*PostApiV1HostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1HostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Host
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1HostsIdResponse parses an HTTP response from a DeleteApiV1HostsIdWithResponse call
func ParseDeleteApiV1HostsIdResponse(rsp *http.Response) (*DeleteApiV1HostsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1HostsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1HostsIdResponse parses an HTTP response from a GetApiV1HostsIdWithResponse call
func ParseGetApiV1HostsIdResponse(rsp *http.Response) (*GetApiV1HostsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1HostsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Host
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV1HostsIdResponse parses an HTTP response from a PutApiV1HostsIdWithResponse call
func ParsePutApiV1HostsIdResponse(rsp *http.Response) (*PutApiV1HostsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1HostsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Host
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1HostsIdHeartbeatResponse parses an HTTP response from a PostApiV1HostsIdHeartbeatWithResponse call
func ParsePostApiV1HostsIdHeartbeatResponse(rsp *http.Response) (*PostApiV1HostsIdHeartbeatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1HostsIdHeartbeatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Host
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetHealthResponse parses an HTTP response from a GetHealthWithResponse call
func ParseGetHealthResponse(rsp *http.Response) (*GetHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
			Version *string `json:"version,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
